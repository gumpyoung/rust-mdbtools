#![allow(non_camel_case_types, non_upper_case_globals, dead_code)]

	/* automatically generated by rust-bindgen */
	extern crate libc;
	extern crate glib;
	extern crate glib_sys as glib_ffi;
	extern crate gobject_sys as gobject_ffi;
	extern crate gio_sys as gio_ffi;
	pub type guint32 = libc::c_uint;
	pub type guint16 = libc::c_ushort;
	pub type gchar = libc::c_char;
	pub type gboolean = libc::c_int;
	pub type GPtrArray = glib_ffi::GPtrArray;
	pub type GArray = glib_ffi::GArray;
	pub type GHashTable = glib_ffi::GHashTable;
	pub type gpointer = glib_ffi::gpointer;
	pub type guint8 = libc::c_uchar;
	pub type Struct_tm = libc::tm;
	pub type FILE = libc::FILE;
	pub type gint32 = libc::c_int;
	pub type Enum_Unnamed1 = libc::c_uint;
	
	pub const MDB_PAGE_DB: libc::c_uint = 0;
	pub const MDB_PAGE_DATA: libc::c_uint = 1;
	pub const MDB_PAGE_TABLE: libc::c_uint = 2;
	pub const MDB_PAGE_INDEX: libc::c_uint = 3;
	pub const MDB_PAGE_LEAF: libc::c_uint = 4;
	pub const MDB_PAGE_MAP: libc::c_uint = 5;
	pub type Enum_Unnamed2 = libc::c_uint;
	pub const MDB_VER_JET3: libc::c_uint = 0;
	pub const MDB_VER_JET4: libc::c_uint = 1;
	pub const MDB_VER_ACCDB_2007: libc::c_uint = 2;
	pub const MDB_VER_ACCDB_2010: libc::c_uint = 259;
	pub type Enum_Unnamed3 = libc::c_int;
	pub const MDB_FORM: libc::c_int = 0;
	pub const MDB_TABLE: libc::c_int = 1;
	pub const MDB_MACRO: libc::c_int = 2;
	pub const MDB_SYSTEM_TABLE: libc::c_int = 3;
	pub const MDB_REPORT: libc::c_int = 4;
	pub const MDB_QUERY: libc::c_int = 5;
	pub const MDB_LINKED_TABLE: libc::c_int = 6;
	pub const MDB_MODULE: libc::c_int = 7;
	pub const MDB_RELATIONSHIP: libc::c_int = 8;
	pub const MDB_UNKNOWN_09: libc::c_int = 9;
	pub const MDB_UNKNOWN_0A: libc::c_int = 10;
	pub const MDB_DATABASE_PROPERTY: libc::c_int = 11;
	pub const MDB_ANY: libc::c_int = -1;
	pub type Enum_Unnamed4 = libc::c_uint;
	pub const MDB_BOOL: libc::c_uint = 1;
	pub const MDB_BYTE: libc::c_uint = 2;
	pub const MDB_INT: libc::c_uint = 3;
	pub const MDB_LONGINT: libc::c_uint = 4;
	pub const MDB_MONEY: libc::c_uint = 5;
	pub const MDB_FLOAT: libc::c_uint = 6;
	pub const MDB_DOUBLE: libc::c_uint = 7;
	pub const MDB_DATETIME: libc::c_uint = 8;
	pub const MDB_BINARY: libc::c_uint = 9;
	pub const MDB_TEXT: libc::c_uint = 10;
	pub const MDB_OLE: libc::c_uint = 11;
	pub const MDB_MEMO: libc::c_uint = 12;
	pub const MDB_REPID: libc::c_uint = 15;
	pub const MDB_NUMERIC: libc::c_uint = 16;
	pub const MDB_COMPLEX: libc::c_uint = 18;
	pub type Enum_Unnamed5 = libc::c_uint;
	pub const MDB_OR: libc::c_uint = 1;
	pub const MDB_AND: libc::c_uint = 2;
	pub const MDB_NOT: libc::c_uint = 3;
	pub const MDB_EQUAL: libc::c_uint = 4;
	pub const MDB_GT: libc::c_uint = 5;
	pub const MDB_LT: libc::c_uint = 6;
	pub const MDB_GTEQ: libc::c_uint = 7;
	pub const MDB_LTEQ: libc::c_uint = 8;
	pub const MDB_LIKE: libc::c_uint = 9;
	pub const MDB_ISNULL: libc::c_uint = 10;
	pub const MDB_NOTNULL: libc::c_uint = 11;
	pub type Enum_Unnamed6 = libc::c_uint;
	pub const MDB_TABLE_SCAN: libc::c_uint = 0;
	pub const MDB_LEAF_SCAN: libc::c_uint = 1;
	pub const MDB_INDEX_SCAN: libc::c_uint = 2;
	pub type MdbStrategy = Enum_Unnamed6;
	pub type Enum_Unnamed7 = libc::c_uint;
	pub const MDB_NOFLAGS: libc::c_uint = 0;
	pub const MDB_WRITABLE: libc::c_uint = 1;
	pub type MdbFileFlags = Enum_Unnamed7;
	pub type Enum_Unnamed8 = libc::c_uint;
	pub const MDB_DEBUG_LIKE: libc::c_uint = 1;
	pub const MDB_DEBUG_WRITE: libc::c_uint = 2;
	pub const MDB_DEBUG_USAGE: libc::c_uint = 4;
	pub const MDB_DEBUG_OLE: libc::c_uint = 8;
	pub const MDB_DEBUG_ROW: libc::c_uint = 16;
	pub const MDB_DEBUG_PROPS: libc::c_uint = 32;
	pub const MDB_USE_INDEX: libc::c_uint = 64;
	pub const MDB_NO_MEMO: libc::c_uint = 128;
	pub type Enum_Unnamed9 = libc::c_uint;
	pub const MDB_ASC: libc::c_uint = 0;
	pub const MDB_DESC: libc::c_uint = 1;
	pub type Enum_Unnamed10 = libc::c_uint;
	pub const MDB_IDX_UNIQUE: libc::c_uint = 1;
	pub const MDB_IDX_IGNORENULLS: libc::c_uint = 2;
	pub const MDB_IDX_REQUIRED: libc::c_uint = 8;
	pub type Enum_Unnamed11 = libc::c_uint;
	pub const MDB_SHEXP_DROPTABLE: libc::c_uint = 1;
	pub const MDB_SHEXP_CST_NOTNULL: libc::c_uint = 2;
	pub const MDB_SHEXP_CST_NOTEMPTY: libc::c_uint = 4;
	pub const MDB_SHEXP_COMMENTS: libc::c_uint = 8;
	pub const MDB_SHEXP_DEFVALUES: libc::c_uint = 16;
	pub const MDB_SHEXP_INDEXES: libc::c_uint = 32;
	pub const MDB_SHEXP_RELATIONS: libc::c_uint = 64;
	pub type Enum_Unnamed12 = libc::c_uint;
	pub const MDB_BINEXPORT_STRIP: libc::c_uint = 0;
	pub const MDB_BINEXPORT_RAW: libc::c_uint = 1;
	pub const MDB_BINEXPORT_OCTAL: libc::c_uint = 2;
	pub type MdbIndex = Struct_mdbindex;
	pub type MdbSargNode = Struct_mdbsargtree;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed13 {
	    pub name: *mut libc::c_char,
	    pub needs_length: libc::c_uchar,
	    pub needs_scale: libc::c_uchar,
	    pub needs_quotes: libc::c_uchar,
	}
	impl ::std::clone::Clone for Struct_Unnamed13 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed13 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbBackendType = Struct_Unnamed13;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed14 {
	    pub capabilities: guint32,
	    pub types_table: *mut MdbBackendType,
	    pub type_shortdate: *mut MdbBackendType,
	    pub type_autonum: *mut MdbBackendType,
	    pub short_now: *const libc::c_char,
	    pub long_now: *const libc::c_char,
	    pub charset_statement: *const libc::c_char,
	    pub drop_statement: *const libc::c_char,
	    pub constaint_not_empty_statement: *const libc::c_char,
	    pub column_comment_statement: *const libc::c_char,
	    pub table_comment_statement: *const libc::c_char,
	    pub quote_schema_name: ::std::option::Option<unsafe extern "C" fn(arg1:
	                                                                          *const gchar,
	                                                                      arg2:
	                                                                          *const gchar)
	                                                     -> *mut gchar>,
	}
	impl ::std::clone::Clone for Struct_Unnamed14 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed14 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbBackend = Struct_Unnamed14;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed15 {
	    pub collect: gboolean,
	    pub pg_reads: libc::c_ulong,
	}
	impl ::std::clone::Clone for Struct_Unnamed15 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed15 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbStatistics = Struct_Unnamed15;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed16 {
	    pub fd: libc::c_int,
	    pub writable: glib_ffi::gboolean,
	    pub filename: *mut libc::c_char,
	    pub jet_version: guint32,
	    pub db_key: guint32,
	    pub db_passwd: [libc::c_char; 14usize],
	    pub default_backend: *mut MdbBackend,
	    pub backend_name: *mut libc::c_char,
	    pub stats: *mut MdbStatistics,
	    pub map_sz: libc::c_int,
	    pub free_map: *mut libc::c_uchar,
	    pub refs: libc::c_int,
	}
	impl ::std::clone::Clone for Struct_Unnamed16 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed16 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbFile = Struct_Unnamed16;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed17 {
	    pub pg_size: libc::ssize_t,
	    pub row_count_offset: guint16,
	    pub tab_num_rows_offset: guint16,
	    pub tab_num_cols_offset: guint16,
	    pub tab_num_idxs_offset: guint16,
	    pub tab_num_ridxs_offset: guint16,
	    pub tab_usage_map_offset: guint16,
	    pub tab_first_dpg_offset: guint16,
	    pub tab_cols_start_offset: guint16,
	    pub tab_ridx_entry_size: guint16,
	    pub col_flags_offset: guint16,
	    pub col_size_offset: guint16,
	    pub col_num_offset: guint16,
	    pub tab_col_entry_size: guint16,
	    pub tab_free_map_offset: guint16,
	    pub tab_col_offset_var: guint16,
	    pub tab_col_offset_fixed: guint16,
	    pub tab_row_col_num_offset: guint16,
	}
	impl ::std::clone::Clone for Struct_Unnamed17 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed17 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbFormatConstants = Struct_Unnamed17;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed18 {
	    pub f: *mut MdbFile,
	    pub cur_pg: guint32,
	    pub row_num: guint16,
	    pub cur_pos: libc::c_uint,
	    pub pg_buf: [libc::c_uchar; 4096usize],
	    pub alt_pg_buf: [libc::c_uchar; 4096usize],
	    pub num_catalog: libc::c_uint,
	    pub catalog: *mut GPtrArray,
	    pub default_backend: *mut MdbBackend,
	    pub backend_name: *mut libc::c_char,
	    pub fmt: *mut MdbFormatConstants,
	    pub stats: *mut MdbStatistics,
	}
	impl ::std::clone::Clone for Struct_Unnamed18 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed18 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbHandle = Struct_Unnamed18;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed19 {
	    pub mdb: *mut MdbHandle,
	    pub object_name: [libc::c_char; 257usize],
	    pub object_type: libc::c_int,
	    pub table_pg: libc::c_ulong,
	    pub props: *mut GArray,
	    pub columns: *mut GArray,
	    pub flags: libc::c_int,
	}
	impl ::std::clone::Clone for Struct_Unnamed19 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed19 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbCatalogEntry = Struct_Unnamed19;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed20 {
	    pub name: *mut gchar,
	    pub hash: *mut GHashTable,
	}
	impl ::std::clone::Clone for Struct_Unnamed20 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed20 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbProperties = Struct_Unnamed20;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Union_Unnamed21 {
	    pub _bindgen_data_: [u64; 32usize],
	}
	impl Union_Unnamed21 {
	    pub unsafe fn i(&mut self) -> *mut libc::c_int {
	        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
	        ::std::mem::transmute(raw.offset(0))
	    }
	    pub unsafe fn d(&mut self) -> *mut libc::c_double {
	        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
	        ::std::mem::transmute(raw.offset(0))
	    }
	    pub unsafe fn s(&mut self) -> *mut [libc::c_char; 256usize] {
	        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
	        ::std::mem::transmute(raw.offset(0))
	    }
	}
	impl ::std::clone::Clone for Union_Unnamed21 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Union_Unnamed21 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbAny = Union_Unnamed21;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed22 {
	    pub table: *mut Struct_S_MdbTableDef,
	    pub name: [libc::c_char; 257usize],
	    pub col_type: libc::c_int,
	    pub col_size: libc::c_int,
	    pub bind_ptr: *mut libc::c_void,
	    pub len_ptr: *mut libc::c_int,
	    pub properties: *mut GHashTable,
	    pub num_sargs: libc::c_uint,
	    pub sargs: *mut GPtrArray,
	    pub idx_sarg_cache: *mut GPtrArray,
	    pub is_fixed: libc::c_uchar,
	    pub query_order: libc::c_int,
	    pub col_num: libc::c_int,
	    pub cur_value_start: libc::c_int,
	    pub cur_value_len: libc::c_int,
	    pub cur_blob_pg_row: guint32,
	    pub chunk_size: libc::c_int,
	    pub col_prec: libc::c_int,
	    pub col_scale: libc::c_int,
	    pub is_long_auto: libc::c_uchar,
	    pub is_uuid_auto: libc::c_uchar,
	    pub props: *mut MdbProperties,
	    pub fixed_offset: libc::c_int,
	    pub var_col_num: libc::c_uint,
	    pub row_col_num: libc::c_int,
	}
	impl ::std::clone::Clone for Struct_Unnamed22 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed22 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbColumn = Struct_Unnamed22;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_mdbsargtree {
	    pub op: libc::c_int,
	    pub col: *mut MdbColumn,
	    pub value: MdbAny,
	    pub parent: *mut libc::c_void,
	    pub left: *mut MdbSargNode,
	    pub right: *mut MdbSargNode,
	}
	impl ::std::clone::Clone for Struct_mdbsargtree {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_mdbsargtree {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed23 {
	    pub pg: guint32,
	    pub start_pos: libc::c_int,
	    pub offset: libc::c_int,
	    pub len: libc::c_int,
	    pub idx_starts: [guint16; 2000usize],
	    pub cache_value: [libc::c_uchar; 256usize],
	}
	impl ::std::clone::Clone for Struct_Unnamed23 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed23 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbIndexPage = Struct_Unnamed23;
	pub type MdbSargTreeFunc =
	    ::std::option::Option<unsafe extern "C" fn(arg1: *mut MdbSargNode,
	                                               data: gpointer)
	                              -> libc::c_int>;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed24 {
	    pub cur_depth: libc::c_int,
	    pub last_leaf_found: guint32,
	    pub clean_up_mode: libc::c_int,
	    pub pages: [MdbIndexPage; 10usize],
	}
	impl ::std::clone::Clone for Struct_Unnamed24 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed24 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbIndexChain = Struct_Unnamed24;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_S_MdbTableDef {
	    pub entry: *mut MdbCatalogEntry,
	    pub name: [libc::c_char; 257usize],
	    pub num_cols: libc::c_uint,
	    pub columns: *mut GPtrArray,
	    pub num_rows: libc::c_uint,
	    pub index_start: libc::c_int,
	    pub num_real_idxs: libc::c_uint,
	    pub num_idxs: libc::c_uint,
	    pub indices: *mut GPtrArray,
	    pub first_data_pg: guint32,
	    pub cur_pg_num: guint32,
	    pub cur_phys_pg: guint32,
	    pub cur_row: libc::c_uint,
	    pub noskip_del: libc::c_int,
	    pub map_base_pg: guint32,
	    pub map_sz: libc::size_t,
	    pub usage_map: *mut libc::c_uchar,
	    pub freemap_base_pg: guint32,
	    pub freemap_sz: libc::size_t,
	    pub free_usage_map: *mut libc::c_uchar,
	    pub sarg_tree: *mut MdbSargNode,
	    pub strategy: MdbStrategy,
	    pub scan_idx: *mut MdbIndex,
	    pub mdbidx: *mut MdbHandle,
	    pub chain: *mut MdbIndexChain,
	    pub props: *mut MdbProperties,
	    pub num_var_cols: libc::c_uint,
	    pub is_temp_table: libc::c_uint,
	    pub temp_table_pages: *mut GPtrArray,
	}
	impl ::std::clone::Clone for Struct_S_MdbTableDef {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_S_MdbTableDef {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbTableDef = Struct_S_MdbTableDef;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_mdbindex {
	    pub index_num: libc::c_int,
	    pub name: [libc::c_char; 257usize],
	    pub index_type: libc::c_uchar,
	    pub first_pg: guint32,
	    pub num_rows: libc::c_int,
	    pub num_keys: libc::c_uint,
	    pub key_col_num: [libc::c_short; 10usize],
	    pub key_col_order: [libc::c_uchar; 10usize],
	    pub flags: libc::c_uchar,
	    pub table: *mut MdbTableDef,
	}
	impl ::std::clone::Clone for Struct_mdbindex {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_mdbindex {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed25 {
	    pub name: [libc::c_char; 257usize],
	}
	impl ::std::clone::Clone for Struct_Unnamed25 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed25 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbColumnProp = Struct_Unnamed25;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed26 {
	    pub value: *mut libc::c_void,
	    pub siz: libc::c_int,
	    pub start: libc::c_int,
	    pub is_null: libc::c_uchar,
	    pub is_fixed: libc::c_uchar,
	    pub colnum: libc::c_int,
	    pub offset: libc::c_int,
	}
	impl ::std::clone::Clone for Struct_Unnamed26 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed26 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbField = Struct_Unnamed26;
	#[repr(C)]
	#[derive(Copy)]
	pub struct Struct_Unnamed27 {
	    pub op: libc::c_int,
	    pub value: MdbAny,
	}
	impl ::std::clone::Clone for Struct_Unnamed27 {
	    fn clone(&self) -> Self { *self }
	}
	impl ::std::default::Default for Struct_Unnamed27 {
	    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
	}
	pub type MdbSarg = Struct_Unnamed27;
	extern "C" {
	    pub fn mdb_init() -> ();
	    pub fn mdb_exit() -> ();
	    pub fn mdb_read_pg(mdb: *mut MdbHandle, pg: libc::c_ulong) -> libc::ssize_t;
	    pub fn mdb_read_alt_pg(mdb: *mut MdbHandle, pg: libc::c_ulong)
	     -> libc::ssize_t;
	    pub fn mdb_get_byte(buf: *mut libc::c_void, offset: libc::c_int)
	     -> libc::c_uchar;
	    pub fn mdb_get_int16(buf: *mut libc::c_void, offset: libc::c_int)
	     -> libc::c_int;
	    pub fn mdb_get_int32(buf: *mut libc::c_void, offset: libc::c_int)
	     -> libc::c_long;
	    pub fn mdb_get_int32_msb(buf: *mut libc::c_void, offset: libc::c_int)
	     -> libc::c_long;
	    pub fn mdb_get_single(buf: *mut libc::c_void, offset: libc::c_int)
	     -> libc::c_float;
	    pub fn mdb_get_double(buf: *mut libc::c_void, offset: libc::c_int)
	     -> libc::c_double;
	    pub fn mdb_pg_get_byte(mdb: *mut MdbHandle, offset: libc::c_int)
	     -> libc::c_uchar;
	    pub fn mdb_pg_get_int16(mdb: *mut MdbHandle, offset: libc::c_int)
	     -> libc::c_int;
	    pub fn mdb_pg_get_int32(mdb: *mut MdbHandle, offset: libc::c_int)
	     -> libc::c_long;
	    pub fn mdb_pg_get_single(mdb: *mut MdbHandle, offset: libc::c_int)
	     -> libc::c_float;
	    pub fn mdb_pg_get_double(mdb: *mut MdbHandle, offset: libc::c_int)
	     -> libc::c_double;
	    pub fn mdb_open(filename: *const libc::c_char, flags: MdbFileFlags)
	     -> *mut MdbHandle;
	    pub fn mdb_close(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_clone_handle(mdb: *mut MdbHandle) -> *mut MdbHandle;
	    pub fn mdb_swap_pgbuf(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_free_catalog(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_read_catalog(mdb: *mut MdbHandle, obj_type: libc::c_int)
	     -> *mut GPtrArray;
	    pub fn mdb_get_catalogentry_by_name(mdb: *mut MdbHandle,
	                                        name: *const gchar)
	     -> *mut MdbCatalogEntry;
	    pub fn mdb_dump_catalog(mdb: *mut MdbHandle, obj_type: libc::c_int)
	     -> ();
	    pub fn mdb_get_objtype_string(obj_type: libc::c_int)
	     -> *mut libc::c_char;
	    pub fn mdb_alloc_tabledef(entry: *mut MdbCatalogEntry)
	     -> *mut MdbTableDef;
	    pub fn mdb_free_tabledef(table: *mut MdbTableDef) -> ();
	    pub fn mdb_read_table(entry: *mut MdbCatalogEntry) -> *mut MdbTableDef;
	    pub fn mdb_read_table_by_name(mdb: *mut MdbHandle, table_name: *mut gchar,
	                                  obj_type: libc::c_int)
	     -> *mut MdbTableDef;
	    pub fn mdb_append_column(columns: *mut GPtrArray, in_col: *mut MdbColumn)
	     -> ();
	    pub fn mdb_free_columns(columns: *mut GPtrArray) -> ();
	    pub fn mdb_read_columns(table: *mut MdbTableDef) -> *mut GPtrArray;
	    pub fn mdb_table_dump(entry: *mut MdbCatalogEntry) -> ();
	    pub fn read_pg_if_8(mdb: *mut MdbHandle, cur_pos: *mut libc::c_int)
	     -> guint8;
	    pub fn read_pg_if_16(mdb: *mut MdbHandle, cur_pos: *mut libc::c_int)
	     -> guint16;
	    pub fn read_pg_if_32(mdb: *mut MdbHandle, cur_pos: *mut libc::c_int)
	     -> guint32;
	    pub fn read_pg_if_n(mdb: *mut MdbHandle, buf: *mut libc::c_void,
	                        cur_pos: *mut libc::c_int, len: libc::size_t)
	     -> *mut libc::c_void;
	    pub fn mdb_is_user_table(entry: *mut MdbCatalogEntry) -> libc::c_int;
	    pub fn mdb_is_system_table(entry: *mut MdbCatalogEntry) -> libc::c_int;
	    pub fn mdb_table_get_prop(table: *const MdbTableDef, key: *const gchar)
	     -> *const libc::c_char;
	    pub fn mdb_col_get_prop(col: *const MdbColumn, key: *const gchar)
	     -> *const libc::c_char;
	    pub fn mdb_bind_column_by_name(table: *mut MdbTableDef,
	                                   col_name: *mut gchar,
	                                   bind_ptr: *mut libc::c_void,
	                                   len_ptr: *mut libc::c_int)
	     -> libc::c_int;
	    pub fn mdb_data_dump(table: *mut MdbTableDef) -> ();
	    pub fn mdb_date_to_tm(td: libc::c_double, t: *mut Struct_tm) -> ();
	    pub fn mdb_bind_column(table: *mut MdbTableDef, col_num: libc::c_int,
	                           bind_ptr: *mut libc::c_void,
	                           len_ptr: *mut libc::c_int) -> ();
	    pub fn mdb_rewind_table(table: *mut MdbTableDef) -> libc::c_int;
	    pub fn mdb_fetch_row(table: *mut MdbTableDef) -> libc::c_int;
	    pub fn mdb_is_fixed_col(col: *mut MdbColumn) -> libc::c_int;
	    pub fn mdb_col_to_string(mdb: *mut MdbHandle, buf: *mut libc::c_void,
	                             start: libc::c_int, datatype: libc::c_int,
	                             size: libc::c_int) -> *mut libc::c_char;
	    pub fn mdb_find_pg_row(mdb: *mut MdbHandle, pg_row: libc::c_int,
	                           buf: *mut *mut libc::c_void,
	                           off: *mut libc::c_int, len: *mut libc::size_t)
	     -> libc::c_int;
	    pub fn mdb_find_row(mdb: *mut MdbHandle, row: libc::c_int,
	                        start: *mut libc::c_int, len: *mut libc::size_t)
	     -> libc::c_int;
	    pub fn mdb_find_end_of_row(mdb: *mut MdbHandle, row: libc::c_int)
	     -> libc::c_int;
	    pub fn mdb_col_fixed_size(col: *mut MdbColumn) -> libc::c_int;
	    pub fn mdb_col_disp_size(col: *mut MdbColumn) -> libc::c_int;
	    pub fn mdb_ole_read_next(mdb: *mut MdbHandle, col: *mut MdbColumn,
	                             ole_ptr: *mut libc::c_void) -> libc::size_t;
	    pub fn mdb_ole_read(mdb: *mut MdbHandle, col: *mut MdbColumn,
	                        ole_ptr: *mut libc::c_void,
	                        chunk_size: libc::c_int) -> libc::size_t;
	    pub fn mdb_ole_read_full(mdb: *mut MdbHandle, col: *mut MdbColumn,
	                             size: *mut libc::size_t) -> *mut libc::c_void;
	    pub fn mdb_set_date_fmt(arg1: *const libc::c_char) -> ();
	    pub fn mdb_read_row(table: *mut MdbTableDef, row: libc::c_uint)
	     -> libc::c_int;
	    pub fn mdb_buffer_dump(buf: *const libc::c_void, start: libc::c_int,
	                           len: libc::size_t) -> ();
	    pub fn mdb_get_coltype_string(backend: *mut MdbBackend,
	                                  col_type: libc::c_int)
	     -> *mut libc::c_char;
	    pub fn mdb_coltype_takes_length(backend: *mut MdbBackend,
	                                    col_type: libc::c_int) -> libc::c_int;
	    pub fn mdb_get_colbacktype(col: *const MdbColumn)
	     -> *const MdbBackendType;
	    pub fn mdb_get_colbacktype_string(col: *const MdbColumn)
	     -> *const libc::c_char;
	    pub fn mdb_colbacktype_takes_length(col: *const MdbColumn)
	     -> libc::c_int;
	    pub fn mdb_init_backends() -> ();
	    pub fn mdb_register_backend(backend_name: *mut libc::c_char,
	                                capabilities: guint32,
	                                backend_type: *mut MdbBackendType,
	                                type_shortdate: *mut MdbBackendType,
	                                type_autonum: *mut MdbBackendType,
	                                short_now: *const libc::c_char,
	                                long_now: *const libc::c_char,
	                                charset_statement: *const libc::c_char,
	                                drop_statement: *const libc::c_char,
	                                constaint_not_empty_statement:
	                                    *const libc::c_char,
	                                column_comment_statement:
	                                    *const libc::c_char,
	                                table_comment_statement:
	                                    *const libc::c_char,
	                                quote_schema_name:
	                                    ::std::option::Option<unsafe extern "C" fn(arg1:
	                                                                                   *const gchar,
	                                                                               arg2:
	                                                                                   *const gchar)
	                                                              -> *mut gchar>)
	     -> ();
	    pub fn mdb_remove_backends() -> ();
	    pub fn mdb_set_default_backend(mdb: *mut MdbHandle,
	                                   backend_name: *const libc::c_char)
	     -> libc::c_int;
	    pub fn mdb_print_schema(mdb: *mut MdbHandle, outfile: *mut FILE,
	                            tabname: *mut libc::c_char,
	                            dbnamespace: *mut libc::c_char,
	                            export_options: guint32) -> ();
	    pub fn mdb_test_sargs(table: *mut MdbTableDef, fields: *mut MdbField,
	                          num_fields: libc::c_int) -> libc::c_int;
	    pub fn mdb_test_sarg(mdb: *mut MdbHandle, col: *mut MdbColumn,
	                         node: *mut MdbSargNode, field: *mut MdbField)
	     -> libc::c_int;
	    pub fn mdb_sql_walk_tree(node: *mut MdbSargNode, func: MdbSargTreeFunc,
	                             data: gpointer) -> ();
	    pub fn mdb_find_indexable_sargs(node: *mut MdbSargNode, data: gpointer)
	     -> libc::c_int;
	    pub fn mdb_add_sarg_by_name(table: *mut MdbTableDef,
	                                colname: *mut libc::c_char,
	                                in_sarg: *mut MdbSarg) -> libc::c_int;
	    pub fn mdb_test_string(node: *mut MdbSargNode, s: *mut libc::c_char)
	     -> libc::c_int;
	    pub fn mdb_test_int(node: *mut MdbSargNode, i: gint32) -> libc::c_int;
	    pub fn mdb_add_sarg(col: *mut MdbColumn, in_sarg: *mut MdbSarg)
	     -> libc::c_int;
	    pub fn mdb_read_indices(table: *mut MdbTableDef) -> *mut GPtrArray;
	    pub fn mdb_index_dump(table: *mut MdbTableDef, idx: *mut MdbIndex) -> ();
	    pub fn mdb_index_scan_free(table: *mut MdbTableDef) -> ();
	    pub fn mdb_index_find_next_on_page(mdb: *mut MdbHandle,
	                                       ipg: *mut MdbIndexPage)
	     -> libc::c_int;
	    pub fn mdb_index_find_next(mdb: *mut MdbHandle, idx: *mut MdbIndex,
	                               chain: *mut MdbIndexChain, pg: *mut guint32,
	                               row: *mut guint16) -> libc::c_int;
	    pub fn mdb_index_hash_text(text: *mut libc::c_char,
	                               hash: *mut libc::c_char) -> ();
	    pub fn mdb_index_scan_init(mdb: *mut MdbHandle, table: *mut MdbTableDef)
	     -> ();
	    pub fn mdb_index_find_row(mdb: *mut MdbHandle, idx: *mut MdbIndex,
	                              chain: *mut MdbIndexChain, pg: guint32,
	                              row: guint16) -> libc::c_int;
	    pub fn mdb_index_swap_n(src: *mut libc::c_uchar, sz: libc::c_int,
	                            dest: *mut libc::c_uchar) -> ();
	    pub fn mdb_free_indices(indices: *mut GPtrArray) -> ();
	    pub fn mdb_index_page_reset(ipg: *mut MdbIndexPage) -> ();
	    pub fn mdb_index_pack_bitmap(mdb: *mut MdbHandle, ipg: *mut MdbIndexPage)
	     -> libc::c_int;
	    pub fn mdb_stats_on(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_stats_off(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_dump_stats(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_like_cmp(s: *mut libc::c_char, r: *mut libc::c_char)
	     -> libc::c_int;
	    pub fn mdb_put_int16(buf: *mut libc::c_void, offset: guint32,
	                         value: guint32) -> ();
	    pub fn mdb_put_int32(buf: *mut libc::c_void, offset: guint32,
	                         value: guint32) -> ();
	    pub fn mdb_put_int32_msb(buf: *mut libc::c_void, offset: guint32,
	                             value: guint32) -> ();
	    pub fn mdb_crack_row(table: *mut MdbTableDef, row_start: libc::c_int,
	                         row_end: libc::c_int, fields: *mut MdbField)
	     -> libc::c_int;
	    pub fn mdb_add_row_to_pg(table: *mut MdbTableDef,
	                             row_buffer: *mut libc::c_uchar,
	                             new_row_size: libc::c_int) -> guint16;
	    pub fn mdb_update_index(table: *mut MdbTableDef, idx: *mut MdbIndex,
	                            num_fields: libc::c_uint, fields: *mut MdbField,
	                            pgnum: guint32, rownum: guint16) -> libc::c_int;
	    pub fn mdb_insert_row(table: *mut MdbTableDef, num_fields: libc::c_int,
	                          fields: *mut MdbField) -> libc::c_int;
	    pub fn mdb_pack_row(table: *mut MdbTableDef,
	                        row_buffer: *mut libc::c_uchar,
	                        num_fields: libc::c_uint, fields: *mut MdbField)
	     -> libc::c_int;
	    pub fn mdb_replace_row(table: *mut MdbTableDef, row: libc::c_int,
	                           new_row: *mut libc::c_void,
	                           new_row_size: libc::c_int) -> libc::c_int;
	    pub fn mdb_pg_get_freespace(mdb: *mut MdbHandle) -> libc::c_int;
	    pub fn mdb_update_row(table: *mut MdbTableDef) -> libc::c_int;
	    pub fn mdb_new_data_pg(entry: *mut MdbCatalogEntry)
	     -> *mut libc::c_void;
	    pub fn mdb_map_find_next_freepage(table: *mut MdbTableDef,
	                                      row_size: libc::c_int) -> guint32;
	    pub fn mdb_map_find_next(mdb: *mut MdbHandle, map: *mut libc::c_uchar,
	                             map_sz: libc::c_uint, start_pg: guint32)
	     -> gint32;
	    pub fn mdb_free_props(props: *mut MdbProperties) -> ();
	    pub fn mdb_dump_props(props: *mut MdbProperties, outfile: *mut FILE,
	                          show_name: libc::c_int) -> ();
	    pub fn mdb_kkd_to_props(mdb: *mut MdbHandle, kkd: *mut libc::c_void,
	                            len: libc::size_t) -> *mut GArray;
	    pub fn mdb_create_temp_table(mdb: *mut MdbHandle,
	                                 name: *mut libc::c_char)
	     -> *mut MdbTableDef;
	    pub fn mdb_temp_table_add_col(table: *mut MdbTableDef,
	                                  col: *mut MdbColumn) -> ();
	    pub fn mdb_fill_temp_col(tcol: *mut MdbColumn,
	                             col_name: *mut libc::c_char,
	                             col_size: libc::c_int, col_type: libc::c_int,
	                             is_fixed: libc::c_int) -> ();
	    pub fn mdb_fill_temp_field(field: *mut MdbField,
	                               value: *mut libc::c_void, siz: libc::c_int,
	                               is_fixed: libc::c_int,
	                               is_null: libc::c_int, start: libc::c_int,
	                               column: libc::c_int) -> ();
	    pub fn mdb_temp_columns_end(table: *mut MdbTableDef) -> ();
	    pub fn mdb_get_option(optnum: libc::c_ulong) -> libc::c_int;
	    pub fn mdb_debug(klass: libc::c_int, fmt: *mut libc::c_char, ...)
	     -> ();
	    pub fn mdb_unicode2ascii(mdb: *mut MdbHandle, src: *mut libc::c_char,
	                             slen: libc::size_t, dest: *mut libc::c_char,
	                             dlen: libc::size_t) -> libc::c_int;
	    pub fn mdb_ascii2unicode(mdb: *mut MdbHandle, src: *mut libc::c_char,
	                             slen: libc::size_t, dest: *mut libc::c_char,
	                             dlen: libc::size_t) -> libc::c_int;
	    pub fn mdb_iconv_init(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_iconv_close(mdb: *mut MdbHandle) -> ();
	    pub fn mdb_target_charset(mdb: *mut MdbHandle) -> *const libc::c_char;
	}
